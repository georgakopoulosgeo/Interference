#!/usr/bin/env python3
import subprocess
import csv
import os

def run_combined_perf(duration: int, interval: int, output_csv: str) -> subprocess.Popen:
    """
    Run a single perf command that collects:
      - Memory traffic counters:
          ls_dmnd_fills_from_sys.mem_io_local,
          ls_hw_pf_dc_fills.mem_io_local,
          ls_sw_pf_dc_fills.mem_io_local,
          ls_dispatch.store_dispatch
      - IPC and cache misses:
          instructions, cpu-cycles, cache-misses
      - Disk I/O related (indirectly via faults):
          page-faults, major-faults
    Data is sampled every 'interval' milliseconds, for a total of 'duration' seconds.
    The results are output in CSV format to output_csv.
    """
    # Combine all events into a single comma separated string
    events = (
        "ls_dmnd_fills_from_sys.mem_io_local,"
        "ls_hw_pf_dc_fills.mem_io_local,"
        "ls_sw_pf_dc_fills.mem_io_local,"
        "ls_dispatch.store_dispatch,"
        "instructions,"
        "cpu-cycles,"
        "cache-misses,"
        "page-faults,"
        "major-faults"
    )
    cmd = [
        "perf", "stat", "--csv",
        "-I", str(interval),
        "-e", events,
        "-a",  # system-wide measurement
        "-o", output_csv,
        "sleep", str(duration)
    ]
    # Start the perf command; its output will be directed to output_csv
    return subprocess.Popen(cmd, stderr=subprocess.PIPE)

def parse_perf_csv(csv_file: str) -> list:
    """
    Parse the CSV file generated by perf and return a list of dictionaries,
    where each dictionary corresponds to one sample interval.
    """
    metrics = []
    if not os.path.exists(csv_file):
        print(f"CSV file {csv_file} does not exist.")
        return metrics

    with open(csv_file, "r") as f:
        reader = csv.DictReader(f)
        for row in reader:
            metrics.append(row)
    return metrics

def perf_monitoring(duration: int, interval: int, output_csv: str):
    # Parameters: 10-second duration, 5000ms (5 sec) sampling interval, and output file name
    # duration = 10
    # interval = 5000

    print("Perf Monitoring: Starting...")
    perf_process = run_combined_perf(duration, interval, output_csv)
    # You can later run this in a separate thread or process as required.
    perf_process.wait()  # Wait for the perf command to complete

    print("Perf Monitoring: Parsing results...")
    metrics = parse_perf_csv(output_csv)
    print("Perf Monitoring: Completed.")